***python manage.py shell***
***This command opens python shell using project environment!***

- >>> from polls.models import Choice, Question  # Import the model classes we just wrote.

- Check how many Questions are in the db
>>> Question.objects.all()
<QuerySet []>

- You can import stuff in shell this way, and it acts like it would in your environment!
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

- Always save stuff explicitly
>>> q.save()

- Can access it as a variable, has the properties established in the model
>>> q.id
1

>>> q.question_text
"What's new?"

>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

- # Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()

- # objects.all() displays all the questions in the database.
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>

- Adding a __str__ function that returns the question_text to the class makes Question.objects.all() show the question_text:
<QuerySet [<Question: What's up?>]>

- Question.objects.filter(**add a relevant column name here to filter by it)

OR can also add cool queries, such as
Question.objects.filter(question_text__startswith='What')

current_year = timezone.now().Question.objects.get(pub_date__year=current_year)

FROM THE DOCS:
# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
>>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

use delete() to delete a record

~~~~~~~~~~~~~HTML notes~~~~~~~~~~~~~~~
in templates/polls/index.html, notice url in href: 
<a href="/polls/{{ question.id }}/">{{ question.question_text }}</a>

use {% url %} template tag:
<a href="{% url 'detail' question.id %}">{{ question.question_text }}</a>

This calls on the name property in the list of paths found in polls.urls

If you want to change the url, just change it in polls.urls path, without having to rewire the connection between view and template

~~~
Note the forloop.counter in the detail.html template! cool stuff!

csrf token? From the docs:
"Since we’re creating a POST form (which can have the effect of modifying data), we need to worry about Cross Site Request Forgeries. Thankfully, you don’t have to worry too hard, because Django comes with a helpful system for protecting against it. In short, all POST forms that are targeted at internal URLs should use the {% csrf_token %} template tag.""



############ Still unclear on...
choice_set == does the name come from the name of the class? so if the class were called Answer, would it be answer_set?
and we have access to the choice_set because of putting Question as the first argument in the ForeignKey in the Choice class, right?

in the list of url in polls/urls.py, what is the 'int' stand for (integer maybe?)? Are there other keywords as well? 